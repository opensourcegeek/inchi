require('should');

var inchi = require('../../lib/inchi'),
    inchilib = inchi.inchilib,
    fs = require('fs'),
    byline = require('byline'),
    util = require('util'),
    molfile = require('molfile'),
    Molecule = require('ichem-molecule');

describe('inchi-slow', function () {
    function roundTrip(i1, done) {
        Molecule.fromInchi(i1, function (e1, mol) {
            mol.getInchi(function (e2, i2) {

                if (i1 !== i2) {
                    console.log(mol);
                }
                (i1).should.equal(i2);

                done();
            });
        });
    }

    function ifMatch(string, regex, callback) {
        var array = string.match(regex);

        if (array) {
            array.forEach(callback);
        }
    }

    it('should pass the supplied InChI test suite', function (done) {
        var molecules = [],
            actual = [],
            expected = [],
            pending = 0,
            fileDone = false;

        byline(fs.createReadStream('test/fixtures/InChI_TestSet-std-01-nokey.txt'))
            .on('data', function (chunk) {
                expected.push(String(chunk));
            });

        function doCheck() {
            /* todo: check all */
            var diff = 0;

            actual.forEach(function (a, i) {
                if (a[1] !== expected[i]) {
                    diff += 1;
                    console.log(util.format("Difference %d Molecule %d ID %s", diff, i, a[0]));
                    console.log("Expected: " + expected[i]);
                    console.log("Actual:   " + a[1]);
                }
//                (a[1]).should.equal(expected[i]);
            });

            done();
        }

        function gotten() {
            pending -= 1;
            if (pending == 0 && fileDone) {
                doCheck();
            }
        }


        var transform = new molfile.SDFTransform()
                .on('data', function (chunk) {
                    pending += 1;
                    var mol = molfile.parseMol(String(chunk));
                    var m = inchi.moleculeFromMolfile(mol);

                    var target = [];
                    actual.push(target);
                    m.getInchi(function (err, i) {
                        target[0] = mol.data.ID.trim();
                        target[1] = i;
                        gotten();
                    });

                }).on('error', function (error) {
                    console.log(error);
                }).on('finish', function () {
                    fileDone = true;
                });

        fs.createReadStream('deps/inchi/INCHI-1-TEST/test/InChI_TestSet.sdf')
            .pipe(transform);
    });


    it('should be able to make round-trips (huge)', function (done) {

        // molecule from http://www.chemspider.com/Chemical-Structure.24604683.html
        var huge =
'InChI=1S/C805H560N60/c1-65-193-561(194-66-1)745(562-195-67-2-68-196-5' +
'62)806-685-441-321-625(322-442-685)777(626-323-443-686(444-324-626)80' +
'7-746(563-197-69-3-70-198-563)564-199-71-4-72-200-564)838-717-505-385' +
'-657(386-506-717)793(658-387-507-718(508-388-658)839-778(627-325-445-' +
'687(446-326-627)808-747(565-201-73-5-74-202-565)566-203-75-6-76-204-5' +
'66)628-327-447-688(448-328-628)809-748(567-205-77-7-78-206-567)568-20' +
'7-79-8-80-208-568)854-733-537-417-673(418-538-733)801(674-419-539-734' +
'(540-420-674)855-794(659-389-509-719(510-390-659)840-779(629-329-449-' +
'689(450-330-629)810-749(569-209-81-9-82-210-569)570-211-83-10-84-212-' +
'570)630-331-451-690(452-332-630)811-750(571-213-85-11-86-214-571)572-' +
'215-87-12-88-216-572)660-391-511-720(512-392-660)841-780(631-333-453-' +
'691(454-334-631)812-751(573-217-89-13-90-218-573)574-219-91-14-92-220' +
'-574)632-335-455-692(456-336-632)813-752(575-221-93-15-94-222-575)576' +
'-223-95-16-96-224-576)862-741-553-433-681(434-554-741)805(682-435-555' +
'-742(556-436-682)863-802(675-421-541-735(542-422-675)856-795(661-393-' +
'513-721(514-394-661)842-781(633-337-457-693(458-338-633)814-753(577-2' +
'25-97-17-98-226-577)578-227-99-18-100-228-578)634-339-459-694(460-340' +
'-634)815-754(579-229-101-19-102-230-579)580-231-103-20-104-232-580)66' +
'2-395-515-722(516-396-662)843-782(635-341-461-695(462-342-635)816-755' +
'(581-233-105-21-106-234-581)582-235-107-22-108-236-582)636-343-463-69' +
'6(464-344-636)817-756(583-237-109-23-110-238-583)584-239-111-24-112-2' +
'40-584)676-423-543-736(544-424-676)857-796(663-397-517-723(518-398-66' +
'3)844-783(637-345-465-697(466-346-637)818-757(585-241-113-25-114-242-' +
'585)586-243-115-26-116-244-586)638-347-467-698(468-348-638)819-758(58' +
'7-245-117-27-118-246-587)588-247-119-28-120-248-588)664-399-519-724(5' +
'20-400-664)845-784(639-349-469-699(470-350-639)820-759(589-249-121-29' +
'-122-250-589)590-251-123-30-124-252-590)640-351-471-700(472-352-640)8' +
'21-760(591-253-125-31-126-254-591)592-255-127-32-128-256-592,683-437-' +
'557-743(558-438-683)864-803(677-425-545-737(546-426-677)858-797(665-4' +
'01-521-725(522-402-665)846-785(641-353-473-701(474-354-641)822-761(59' +
'3-257-129-33-130-258-593)594-259-131-34-132-260-594)642-355-475-702(4' +
'76-356-642)823-762(595-261-133-35-134-262-595)596-263-135-36-136-264-' +
'596)666-403-523-726(524-404-666)847-786(643-357-477-703(478-358-643)8' +
'24-763(597-265-137-37-138-266-597)598-267-139-38-140-268-598)644-359-' +
'479-704(480-360-644)825-764(599-269-141-39-142-270-599)600-271-143-40' +
'-144-272-600)678-427-547-738(548-428-678)859-798(667-405-525-727(526-' +
'406-667)848-787(645-361-481-705(482-362-645)826-765(601-273-145-41-14' +
'6-274-601)602-275-147-42-148-276-602)646-363-483-706(484-364-646)827-' +
'766(603-277-149-43-150-278-603)604-279-151-44-152-280-604)668-407-527' +
'-728(528-408-668)849-788(647-365-485-707(486-366-647)828-767(605-281-' +
'153-45-154-282-605)606-283-155-46-156-284-606)648-367-487-708(488-368' +
'-648)829-768(607-285-157-47-158-286-607)608-287-159-48-160-288-608)68' +
'4-439-559-744(560-440-684)865-804(679-429-549-739(550-430-679)860-799' +
'(669-409-529-729(530-410-669)850-789(649-369-489-709(490-370-649)830-' +
'769(609-289-161-49-162-290-609)610-291-163-50-164-292-610)650-371-491' +
'-710(492-372-650)831-770(611-293-165-51-166-294-611)612-295-167-52-16' +
'8-296-612)670-411-531-730(532-412-670)851-790(651-373-493-711(494-374' +
'-651)832-771(613-297-169-53-170-298-613)614-299-171-54-172-300-614)65' +
'2-375-495-712(496-376-652)833-772(615-301-173-55-174-302-615)616-303-' +
'175-56-176-304-616)680-431-551-740(552-432-680)861-800(671-413-533-73' +
'1(534-414-671)852-791(653-377-497-713(498-378-653)834-773(617-305-177' +
'-57-178-306-617)618-307-179-58-180-308-618)654-379-499-714(500-380-65' +
'4)835-774(619-309-181-59-182-310-619)620-311-183-60-184-312-620)672-4' +
'15-535-732(536-416-672)853-792(655-381-501-715(502-382-655)836-775(62' +
'1-313-185-61-186-314-621)622-315-187-62-188-316-622)656-383-503-716(5' +
'04-384-656)837-776(623-317-189-63-190-318-623)624-319-191-64-192-320-' +
'624/h1-560H';

        roundTrip(huge, done);
    });
});
